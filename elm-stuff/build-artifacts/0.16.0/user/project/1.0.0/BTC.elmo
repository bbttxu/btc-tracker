Elm.BTC = Elm.BTC || {};
Elm.BTC.make = function (_elm) {
   "use strict";
   _elm.BTC = _elm.BTC || {};
   if (_elm.BTC.values) return _elm.BTC.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var outgoingShip = Elm.Native.Port.make(_elm).inboundSignal("outgoingShip",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var incomingShip = Elm.Native.Port.make(_elm).inboundSignal("incomingShip",
   "{ name : String, capacity : Int\n}",
   function (v) {
      return typeof v === "object" && "name" in v && "capacity" in v ? {_: {}
                                                                       ,name: typeof v.name === "string" || typeof v.name === "object" && v.name instanceof String ? v.name : _U.badPort("a string",
                                                                       v.name)
                                                                       ,capacity: typeof v.capacity === "number" && isFinite(v.capacity) && Math.floor(v.capacity) === v.capacity ? v.capacity : _U.badPort("an integer",
                                                                       v.capacity)} : _U.badPort("an object with fields `name`, `capacity`",v);
   });
   var Order = F3(function (a,b,c) {    return {id: a,size: b,price: c};});
   return _elm.BTC.values = {_op: _op,Order: Order};
};